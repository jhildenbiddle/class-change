{"version":3,"file":"class-change.js","sources":["../src/util.js","../src/add.js","../src/remove.js","../src/toggle.js","../src/attrs.js","../src/listener.js","../src/index.js"],"sourcesContent":["// Exports\n// =============================================================================\n/**\n * Converts space-separates list of class names to an array (if necessary) then\n * trims each array item.\n *\n * @export\n * @param {(array|string)} classNames\n * @returns {array}\n */\nexport function classNamesToArray(classNames) {\n    // String - Trim and convert to Array\n    if (typeof classNames === 'string') {\n        classNames = classNames.trim().replace(/\\s+/g, ' ').split(' ');\n    }\n\n    if (Array.isArray(classNames)) {\n        // Trim items\n        classNames = classNames.map(name => name && name.length ? name.trim() : null);\n\n        // Filter out \"falsey\" values\n        classNames = classNames.filter(Boolean);\n    }\n\n    return classNames;\n}\n\n/**\n * Converts a CSS selector (string), Element, HTMLCollection or NodeList to an\n * array (returns array as-is).\n * - Array: [Element, Element, ...]\n * - Element: document.body\n * - HTMLCollection: document.getElementsByTagName('p')\n * - NodeList: document.querySelectorAll('p')\n * - String (CSS selector): 'p'\n *\n * @export\n * @param {(array|element|htmlcollection|nodelist|string)} elements\n * @param {boolean} [removeDuplicates=true]\n * @returns {array}\n */\nexport function elementsToArray(elements) {\n    // CSS Selector\n    if (typeof elements === 'string') {\n        elements = Array.apply(null, document.querySelectorAll(elements));\n    }\n    // HTMLCollection / NodeList\n    else if (elements instanceof window.HTMLCollection || elements instanceof window.NodeList) {\n        elements = Array.apply(null, elements);\n    }\n    // Node/Element (assumed)\n    else if (elements && !Array.isArray(elements)) {\n        elements = [elements];\n    }\n\n    if (Array.isArray(elements)) {\n        // Remove duplicate\n        return elements.filter((value, index, self) => self.indexOf(value) === index);\n    }\n    else {\n        return [];\n    }\n}\n\n/**\n * Matches self or finds closest ancestor (excluding document) node that match a\n * CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getClosest(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    let matchedElm = null;\n    let testElm    = elm;\n\n    while (testElm && testElm !== document) {\n        if (matches.call(testElm, matchSelector)) {\n            matchedElm = testElm;\n            break;\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return matchedElm;\n}\n\n/**\n * Finds all parent nodes (excluding document), optionally limited to only those\n * that match a CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getParents(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches    = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    const parentElms = [];\n\n    let testElm = elm.parentNode;\n\n    while (testElm && testElm !== document) {\n        if (!matchSelector || matchSelector && matches.call(testElm, matchSelector)) {\n            parentElms.push(testElm);\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return parentElms;\n}\n\n/**\n * Cross-browser wrapper for native \"matches\" method\n *\n * @export\n * @param {element} elm\n * @param {string} selector\n * @returns {boolean}\n */\nexport function matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Add class name(s) to target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to add class name(s) to\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction addClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (classArray && classArray.length) {\n            const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n            const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n            const finalClassArray = elmClassArray.concat(newClassArray);\n\n            elm.className = finalClassArray.join(' ');\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default addClass;\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Remove class name(s) from target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to remove class name(s) from\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction removeClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (elm.className.trim().length && classArray && classArray.length) {\n            const elmClassArray   = elm.className.split(' ');\n            const finalClassArray = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n\n            // Standardize result of setting empty \"class\" attribute.\n            // Internet Explorer and Edge automatically remove the \"class\"\n            // attribute when it is set to \"\". Other browsers (Chrome, Firefox,\n            // Safari) will set the attribute to \"\". The difference in these\n            // behaviors throws off unit tests, so the following code emulates\n            // IE/Edge behavior of removing the attribute when the value is \"\".\n            if (finalClassArray.length) {\n                elm.className = finalClassArray.join(' ');\n            }\n            else {\n                elm.removeAttribute('class');\n            }\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default removeClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove };\n\n\n// Functions\n// =============================================================================\n/**\n * Toggle class name(s) on target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to toggle class name(s) on\n * @param {(array|function|string)} classNames - Array, space-separated list, or\n *   function that returns array/string of class name(s)\n * @param {boolean} [forceTrueFalse] - Force add when true, remove when false\n * @returns {(array|element)} - Target(s)\n */\nfunction toggleClass(target, classNames, forceTrueFalse) {\n    if (forceTrueFalse === true) {\n        return classChange.add(target, classNames);\n    }\n    else if (forceTrueFalse === false) {\n        return classChange.remove(target, classNames);\n    }\n    else {\n        const elms = elementsToArray(target);\n\n        elms.forEach(function(elm, i) {\n            const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n            if (classArray && classArray.length) {\n                const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n                const keepClassArray  = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n                const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n                const finalClassArray = keepClassArray.concat(newClassArray);\n\n                elm.className = finalClassArray.join(' ');\n            }\n        });\n\n        return elms.length === 1 ? elms[0] : elms;\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default toggleClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport { elementsToArray, matchesSelector, getClosest, getParents } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds or removes click/tap event listener(s) on elements that have\n * data-class-* attributes and trigger associated method(s).\n *\n * @param {(array|element|htmlcollection|nodelist|string)} [listenerTarget=document]\n * @param {boolean} [addTrueRemoveFalse=true]\n */\nfunction addRemoveAttrListener(listenerTarget = document, addTrueRemoveFalse = true) {\n    // Allow boolean for listenerTarget\n    // true = add default listener, false = remove default listener\n    addTrueRemoveFalse = typeof(listenerTarget) === 'boolean' ? listenerTarget : addTrueRemoveFalse;\n    listenerTarget = typeof(listenerTarget) === 'boolean' ? document : listenerTarget;\n\n    const elms   = elementsToArray(listenerTarget);\n    const method = listenerTarget === false || addTrueRemoveFalse === false ? 'removeEventListener' : 'addEventListener';\n\n    elms.forEach(function(elm) {\n        elm[method]('click', handleAttrEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            elms.forEach(function(elm) {\n                elm.removeEventListener('click', handleAttrEvent);\n            });\n        }\n    };\n}\n\n/**\n * Handles click/tap events triggered via data-class-* attributes.\n *\n * @param {object} evt\n */\nfunction handleAttrEvent(evt) {\n    const elms          = [evt.target].concat(getParents(evt.target));\n    const matchSelector = '[data-class-add],[data-class-remove],[data-class-toggle]';\n    const methods       = ['add', 'remove', 'toggle'];\n\n    elms.forEach(function(elm) {\n        const hasAttr = matchesSelector(elm, matchSelector);\n\n        if (hasAttr) {\n            const changeTasks = {};\n\n            methods.forEach(function(method) {\n                const classNames = elm.getAttribute(`data-class-${method}`);\n\n                if (classNames && classNames.length) {\n                    const closestAttr  = elm.getAttribute(`data-class-${method}-closest`) || elm.getAttribute('data-class-closest');\n                    const parentsAttr  = elm.getAttribute(`data-class-${method}-parents`) || elm.getAttribute('data-class-parents');\n                    const siblingsAttr = elm.getAttribute(`data-class-${method}-siblings`) || elm.getAttribute('data-class-siblings');\n                    const targetAttr   = elm.getAttribute(`data-class-${method}-target`) || elm.getAttribute('data-class-target');\n\n                    let changeElms = [];\n\n                    if (closestAttr) {\n                        const elms = getClosest(elm, closestAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (parentsAttr) {\n                        const elms = getParents(elm, parentsAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (siblingsAttr) {\n                        const siblingElms = elementsToArray(elm.parentNode.children);\n\n                        siblingElms.forEach(function(siblingElm) {\n                            const isSibling = siblingElm !== elm;\n                            const isMatch   = matchesSelector(siblingElm, siblingsAttr);\n\n                            if (isSibling && isMatch) {\n                                changeElms.push(siblingElm);\n                            }\n                        });\n                    }\n                    if (targetAttr) {\n                        const elms = elementsToArray(document.querySelectorAll(targetAttr));\n                        changeElms = changeElms.concat(elms);\n                    }\n\n                    changeTasks[method] = {\n                        target: changeElms.length ? changeElms : elm,\n                        classNames\n                    };\n                }\n            });\n\n            methods.forEach(function(method) {\n                if (changeTasks[method]) {\n                    classChange[method](changeTasks[method].target, changeTasks[method].classNames);\n                }\n            });\n        }\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default addRemoveAttrListener;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport * as util from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds classChange event listener(s) and returns a remove() method\n *\n * @param {object} options\n * @param {(array|element|htmlcollection|nodelist|string)} [options.target=document]\n * @param {string} [options.event=\"click\"]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.match=true]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.change=true]\n * @param {(array|function|string)} [options.add]\n * @param {(array|function|string)} [options.remove]\n * @param {(array|function|string)} [options.toggle]\n * @returns {object} Remove method\n */\nfunction addChangeListener(options) {\n    const settings = {\n        target: util.elementsToArray(options.target || document.body),\n        event : options.event  || 'click',\n        match : options.match  || true,\n        change: options.change || true,\n        add   : options.add    || null,\n        remove: options.remove || null,\n        toggle: options.toggle || null\n    };\n\n    function triggerChangeEvent(evt) {\n        handleChangeEvent(evt, settings);\n    }\n\n    settings.target.forEach(function(target) {\n        target.addEventListener(settings.event, triggerChangeEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            settings.target.forEach(function(target) {\n                target.removeEventListener(settings.event, triggerChangeEvent);\n            });\n        }\n    };\n}\n\n/**\n * Detects if an event matches the one defined in settings and changes class\n * names on elements accordingly\n *\n * @param {object} evt - Event object\n * @param {object} settings - Listener settings\n */\nfunction handleChangeEvent(evt, settings) {\n    let matchElms = settings.match instanceof Function ? settings.match(evt) : settings.match;\n    let matchedElm;\n\n    // Match: Event target\n    /* istanbul ignore else */\n    if (matchElms === true) {\n        matchElms  = [evt.target];\n        matchedElm = evt.target;\n    }\n    // Match: CSS selector\n    else if (typeof matchElms === 'string') {\n        const isMatch = util.matchesSelector(evt.target, matchElms);\n\n        matchedElm = isMatch ? evt.target : util.getParents(evt.target).filter(elm => util.matchesSelector(elm, matchElms))[0] || null;\n        matchElms  = util.elementsToArray(matchElms);\n    }\n    // Match: Array, Element, HTMLCollection, NodeList\n    else if (typeof matchElms === 'object') {\n        const isMatch = evt.target === matchElms;\n\n        matchElms  = util.elementsToArray(matchElms);\n        matchedElm = isMatch ? evt.target : matchElms[matchElms.indexOf(evt.target)] || util.getParents(evt.target).filter(elm => matchElms.indexOf(elm) !== -1)[0] || null;\n    }\n\n    // Change\n    if (matchedElm) {\n        const matchedElmIndex = matchElms.indexOf(matchedElm);\n        let   changeElms      = settings.change instanceof Function ? settings.change(evt, matchedElm, matchedElmIndex) : settings.change;\n\n        changeElms = changeElms === true ? [evt.target] : util.elementsToArray(changeElms);\n\n        ['toggle', 'remove', 'add'].forEach(changeType => {\n            // If settings value is a function, call for each element with args\n            if (settings[changeType] instanceof Function) {\n                changeElms.forEach((changeElm, changeElmIndex) => {\n                    const classNames = settings[changeType](evt, matchedElm, matchedElmIndex, changeElm, changeElmIndex);\n\n                    classChange[changeType](changeElm, classNames);\n                });\n            }\n            else {\n                const classNames = settings[changeType];\n\n                classChange[changeType](changeElms, classNames);\n            }\n        });\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default addChangeListener;\n","// Modules\n// =============================================================================\nimport add      from './add.js';\nimport attrs    from './attrs.js';\nimport listener from './listener.js';\nimport remove   from './remove.js';\nimport toggle   from './toggle.js';\n\n\n// Exports\n// =============================================================================\nexport default { add, attrs, listener, remove, toggle };\n"],"names":["classNamesToArray","classNames","trim","replace","split","Array","isArray","map","name","length","filter","Boolean","elementsToArray","elements","apply","document","querySelectorAll","window","HTMLCollection","NodeList","value","index","self","indexOf","getClosest","elm","matchSelector","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchedElm","testElm","call","parentNode","getParents","parentElms","push","selector","addClass","target","elms","forEach","i","classArray","Function","elmClassArray","className","newClassArray","finalClassArray","concat","join","removeClass","removeAttribute","classChange","add","remove","toggleClass","forceTrueFalse","keepClassArray","toggle","addRemoveAttrListener","listenerTarget","addTrueRemoveFalse","method","handleAttrEvent","removeEventListener","evt","methods","hasAttr","changeTasks","getAttribute","closestAttr","parentsAttr","siblingsAttr","targetAttr","changeElms","siblingElms","children","siblingElm","isSibling","isMatch","addChangeListener","options","settings","util","body","event","match","change","triggerChangeEvent","handleChangeEvent","addEventListener","matchElms","_typeof","matchedElmIndex","changeType","changeElm","changeElmIndex","attrs","listener"],"mappings":"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"}