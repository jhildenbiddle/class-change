{"version":3,"file":"class-change.min.js","sources":["../src/util.js","../src/add.js","../src/remove.js","../src/toggle.js","../src/attrs.js","../src/listener.js","../src/index.js"],"sourcesContent":["// Exports\n// =============================================================================\n/**\n * Converts space-separates list of class names to an array (if necessary) then\n * trims each array item.\n *\n * @export\n * @param {(array|string)} classNames\n * @returns {array}\n */\nexport function classNamesToArray(classNames) {\n    // String - Trim and convert to Array\n    if (typeof classNames === 'string') {\n        classNames = classNames.trim().replace(/\\s+/g, ' ').split(' ');\n    }\n\n    if (Array.isArray(classNames)) {\n        // Trim items\n        classNames = classNames.map(name => name && name.length ? name.trim() : null);\n\n        // Filter out \"falsey\" values\n        classNames = classNames.filter(Boolean);\n    }\n\n    return classNames;\n}\n\n/**\n * Converts a CSS selector (string), Element, HTMLCollection or NodeList to an\n * array (returns array as-is).\n * - Array: [Element, Element, ...]\n * - Element: document.body\n * - HTMLCollection: document.getElementsByTagName('p')\n * - NodeList: document.querySelectorAll('p')\n * - String (CSS selector): 'p'\n *\n * @export\n * @param {(array|element|htmlcollection|nodelist|string)} elements\n * @param {boolean} [removeDuplicates=true]\n * @returns {array}\n */\nexport function elementsToArray(elements) {\n    // CSS Selector\n    if (typeof elements === 'string') {\n        elements = Array.apply(null, document.querySelectorAll(elements));\n    }\n    // HTMLCollection / NodeList\n    else if (elements instanceof window.HTMLCollection || elements instanceof window.NodeList) {\n        elements = Array.apply(null, elements);\n    }\n    // Node/Element (assumed)\n    else if (elements && !Array.isArray(elements)) {\n        elements = [elements];\n    }\n\n    if (Array.isArray(elements)) {\n        // Remove duplicate\n        return elements.filter((value, index, self) => self.indexOf(value) === index);\n    }\n    else {\n        return [];\n    }\n}\n\n/**\n * Matches self or finds closest ancestor (excluding document) node that match a\n * CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getClosest(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    let matchedElm = null;\n    let testElm    = elm;\n\n    while (testElm && testElm !== document) {\n        if (matches.call(testElm, matchSelector)) {\n            matchedElm = testElm;\n            break;\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return matchedElm;\n}\n\n/**\n * Finds all parent nodes (excluding document), optionally limited to only those\n * that match a CSS selector\n *\n * @export\n * @param {element} elm\n * @param {sting} matchSelector\n * @returns {array}\n */\nexport function getParents(elm, matchSelector) {\n    /* istanbul ignore next */\n    const matches    = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    const parentElms = [];\n\n    let testElm = elm.parentNode;\n\n    while (testElm && testElm !== document) {\n        if (!matchSelector || matchSelector && matches.call(testElm, matchSelector)) {\n            parentElms.push(testElm);\n        }\n\n        testElm = testElm.parentNode;\n    }\n\n    return parentElms;\n}\n\n/**\n * Cross-browser wrapper for native \"matches\" method\n *\n * @export\n * @param {element} elm\n * @param {string} selector\n * @returns {boolean}\n */\nexport function matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Add class name(s) to target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to add class name(s) to\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction addClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (classArray && classArray.length) {\n            const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n            const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n            const finalClassArray = elmClassArray.concat(newClassArray);\n\n            elm.className = finalClassArray.join(' ');\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default addClass;\n","// Modules\n// =============================================================================\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Functions\n// =============================================================================\n/**\n * Remove class name(s) from target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to remove class name(s) from\n * @param {(array|function|string)} classNames - Array, space-separated list,\n *  or function that returns array/string of class name(s)\n * @returns {(array|element)} - Target(s)\n */\nfunction removeClass(target, classNames) {\n    const elms = elementsToArray(target);\n\n    elms.forEach(function(elm, i) {\n        const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n        if (elm.className.trim().length && classArray && classArray.length) {\n            const elmClassArray   = elm.className.split(' ');\n            const finalClassArray = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n\n            // Standardize result of setting empty \"class\" attribute.\n            // Internet Explorer and Edge automatically remove the \"class\"\n            // attribute when it is set to \"\". Other browsers (Chrome, Firefox,\n            // Safari) will set the attribute to \"\". The difference in these\n            // behaviors throws off unit tests, so the following code emulates\n            // IE/Edge behavior of removing the attribute when the value is \"\".\n            if (finalClassArray.length) {\n                elm.className = finalClassArray.join(' ');\n            }\n            else {\n                elm.removeAttribute('class');\n            }\n        }\n    });\n\n    return elms.length === 1 ? elms[0] : elms;\n}\n\n\n// Exports\n// =============================================================================\nexport default removeClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport { elementsToArray, classNamesToArray } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove };\n\n\n// Functions\n// =============================================================================\n/**\n * Toggle class name(s) on target element(s)\n *\n * @param {(array|element|htmlcollection|nodelist|string)} target -\n *   Element(s) to toggle class name(s) on\n * @param {(array|function|string)} classNames - Array, space-separated list, or\n *   function that returns array/string of class name(s)\n * @param {boolean} [forceTrueFalse] - Force add when true, remove when false\n * @returns {(array|element)} - Target(s)\n */\nfunction toggleClass(target, classNames, forceTrueFalse) {\n    if (forceTrueFalse === true) {\n        return classChange.add(target, classNames);\n    }\n    else if (forceTrueFalse === false) {\n        return classChange.remove(target, classNames);\n    }\n    else {\n        const elms = elementsToArray(target);\n\n        elms.forEach(function(elm, i) {\n            const classArray = classNamesToArray(classNames instanceof Function ? classNames(elm, i) : classNames);\n\n            if (classArray && classArray.length) {\n                const elmClassArray   = elm.className.length ? elm.className.split(' ') : [];\n                const keepClassArray  = elmClassArray.filter(className => classArray.indexOf(className) === -1);\n                const newClassArray   = classArray.filter(className => elmClassArray.indexOf(className) === -1);\n                const finalClassArray = keepClassArray.concat(newClassArray);\n\n                elm.className = finalClassArray.join(' ');\n            }\n        });\n\n        return elms.length === 1 ? elms[0] : elms;\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default toggleClass;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport { elementsToArray, matchesSelector, getClosest, getParents } from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds or removes click/tap event listener(s) on elements that have\n * data-class-* attributes and trigger associated method(s).\n *\n * @param {(array|element|htmlcollection|nodelist|string)} [listenerTarget=document]\n * @param {boolean} [addTrueRemoveFalse=true]\n */\nfunction addRemoveAttrListener(listenerTarget = document, addTrueRemoveFalse = true) {\n    // Allow boolean for listenerTarget\n    // true = add default listener, false = remove default listener\n    addTrueRemoveFalse = typeof(listenerTarget) === 'boolean' ? listenerTarget : addTrueRemoveFalse;\n    listenerTarget = typeof(listenerTarget) === 'boolean' ? document : listenerTarget;\n\n    const elms   = elementsToArray(listenerTarget);\n    const method = listenerTarget === false || addTrueRemoveFalse === false ? 'removeEventListener' : 'addEventListener';\n\n    elms.forEach(function(elm) {\n        elm[method]('click', handleAttrEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            elms.forEach(function(elm) {\n                elm.removeEventListener('click', handleAttrEvent);\n            });\n        }\n    };\n}\n\n/**\n * Handles click/tap events triggered via data-class-* attributes.\n *\n * @param {object} evt\n */\nfunction handleAttrEvent(evt) {\n    const elms          = [evt.target].concat(getParents(evt.target));\n    const matchSelector = '[data-class-add],[data-class-remove],[data-class-toggle]';\n    const methods       = ['add', 'remove', 'toggle'];\n\n    elms.forEach(function(elm) {\n        const hasAttr = matchesSelector(elm, matchSelector);\n\n        if (hasAttr) {\n            const changeTasks = {};\n\n            methods.forEach(function(method) {\n                const classNames = elm.getAttribute(`data-class-${method}`);\n\n                if (classNames && classNames.length) {\n                    const closestAttr  = elm.getAttribute(`data-class-${method}-closest`) || elm.getAttribute('data-class-closest');\n                    const parentsAttr  = elm.getAttribute(`data-class-${method}-parents`) || elm.getAttribute('data-class-parents');\n                    const siblingsAttr = elm.getAttribute(`data-class-${method}-siblings`) || elm.getAttribute('data-class-siblings');\n                    const targetAttr   = elm.getAttribute(`data-class-${method}-target`) || elm.getAttribute('data-class-target');\n\n                    let changeElms = [];\n\n                    if (closestAttr) {\n                        const elms = getClosest(elm, closestAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (parentsAttr) {\n                        const elms = getParents(elm, parentsAttr);\n                        changeElms = changeElms.concat(elms);\n                    }\n                    if (siblingsAttr) {\n                        const siblingElms = elementsToArray(elm.parentNode.children);\n\n                        siblingElms.forEach(function(siblingElm) {\n                            const isSibling = siblingElm !== elm;\n                            const isMatch   = matchesSelector(siblingElm, siblingsAttr);\n\n                            if (isSibling && isMatch) {\n                                changeElms.push(siblingElm);\n                            }\n                        });\n                    }\n                    if (targetAttr) {\n                        const elms = elementsToArray(document.querySelectorAll(targetAttr));\n                        changeElms = changeElms.concat(elms);\n                    }\n\n                    changeTasks[method] = {\n                        target: changeElms.length ? changeElms : elm,\n                        classNames\n                    };\n                }\n            });\n\n            methods.forEach(function(method) {\n                if (changeTasks[method]) {\n                    classChange[method](changeTasks[method].target, changeTasks[method].classNames);\n                }\n            });\n        }\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default addRemoveAttrListener;\n","// Modules\n// =============================================================================\nimport add    from './add.js';\nimport remove from './remove.js';\nimport toggle from './toggle.js';\nimport * as util from './util.js';\n\n\n// Variables\n// =============================================================================\nconst classChange = { add, remove, toggle };\n\n\n// Functions\n// =============================================================================\n/**\n * Adds classChange event listener(s) and returns a remove() method\n *\n * @param {object} options\n * @param {(array|element|htmlcollection|nodelist|string)} [options.target=document]\n * @param {string} [options.event=\"click\"]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.match=true]\n * @param {(array|boolean|element|function|htmlcollection|nodelist|string)} [options.change=true]\n * @param {(array|function|string)} [options.add]\n * @param {(array|function|string)} [options.remove]\n * @param {(array|function|string)} [options.toggle]\n * @returns {object} Remove method\n */\nfunction addChangeListener(options) {\n    const settings = {\n        target: util.elementsToArray(options.target || document.body),\n        event : options.event  || 'click',\n        match : options.match  || true,\n        change: options.change || true,\n        add   : options.add    || null,\n        remove: options.remove || null,\n        toggle: options.toggle || null\n    };\n\n    function triggerChangeEvent(evt) {\n        handleChangeEvent(evt, settings);\n    }\n\n    settings.target.forEach(function(target) {\n        target.addEventListener(settings.event, triggerChangeEvent);\n    });\n\n    // Return object containing remove method\n    return {\n        remove() {\n            settings.target.forEach(function(target) {\n                target.removeEventListener(settings.event, triggerChangeEvent);\n            });\n        }\n    };\n}\n\n/**\n * Detects if an event matches the one defined in settings and changes class\n * names on elements accordingly\n *\n * @param {object} evt - Event object\n * @param {object} settings - Listener settings\n */\nfunction handleChangeEvent(evt, settings) {\n    let matchElms = settings.match instanceof Function ? settings.match(evt) : settings.match;\n    let matchedElm;\n\n    // Match: Event target\n    /* istanbul ignore else */\n    if (matchElms === true) {\n        matchElms  = [evt.target];\n        matchedElm = evt.target;\n    }\n    // Match: CSS selector\n    else if (typeof matchElms === 'string') {\n        const isMatch = util.matchesSelector(evt.target, matchElms);\n\n        matchedElm = isMatch ? evt.target : util.getParents(evt.target).filter(elm => util.matchesSelector(elm, matchElms))[0] || null;\n        matchElms  = util.elementsToArray(matchElms);\n    }\n    // Match: Array, Element, HTMLCollection, NodeList\n    else if (typeof matchElms === 'object') {\n        const isMatch = evt.target === matchElms;\n\n        matchElms  = util.elementsToArray(matchElms);\n        matchedElm = isMatch ? evt.target : matchElms[matchElms.indexOf(evt.target)] || util.getParents(evt.target).filter(elm => matchElms.indexOf(elm) !== -1)[0] || null;\n    }\n\n    // Change\n    if (matchedElm) {\n        const matchedElmIndex = matchElms.indexOf(matchedElm);\n        let   changeElms      = settings.change instanceof Function ? settings.change(evt, matchedElm, matchedElmIndex) : settings.change;\n\n        changeElms = changeElms === true ? [evt.target] : util.elementsToArray(changeElms);\n\n        ['toggle', 'remove', 'add'].forEach(changeType => {\n            // If settings value is a function, call for each element with args\n            if (settings[changeType] instanceof Function) {\n                changeElms.forEach((changeElm, changeElmIndex) => {\n                    const classNames = settings[changeType](evt, matchedElm, matchedElmIndex, changeElm, changeElmIndex);\n\n                    classChange[changeType](changeElm, classNames);\n                });\n            }\n            else {\n                const classNames = settings[changeType];\n\n                classChange[changeType](changeElms, classNames);\n            }\n        });\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default addChangeListener;\n","// Modules\n// =============================================================================\nimport add      from './add.js';\nimport attrs    from './attrs.js';\nimport listener from './listener.js';\nimport remove   from './remove.js';\nimport toggle   from './toggle.js';\n\n\n// Exports\n// =============================================================================\nexport default { add, attrs, listener, remove, toggle };\n"],"names":["classNamesToArray","classNames","trim","replace","split","Array","isArray","map","name","length","filter","Boolean","elementsToArray","elements","apply","document","querySelectorAll","window","HTMLCollection","NodeList","value","index","self","indexOf","getParents","elm","matchSelector","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","parentElms","testElm","parentNode","call","push","selector","addClass","target","elms","forEach","i","classArray","Function","elmClassArray","className","newClassArray","finalClassArray","concat","join","removeClass","removeAttribute","classChange","add","remove","toggleClass","forceTrueFalse","keepClassArray","toggle","handleAttrEvent","evt","methods","changeTasks","method","getAttribute","closestAttr","parentsAttr","siblingsAttr","targetAttr","changeElms","matchedElm","getClosest","children","siblingElm","isSibling","isMatch","attrs","listenerTarget","addTrueRemoveFalse","removeEventListener","listener","options","settings","util","body","event","match","change","triggerChangeEvent","matchElms","_typeof","matchedElmIndex","changeType","changeElm","changeElmIndex","handleChangeEvent","addEventListener"],"mappings":"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"}